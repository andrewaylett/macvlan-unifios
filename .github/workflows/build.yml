name: Build Kernel Module

on:
  push:
    branches:
      - "main"
    tags:
      - "v*"
  pull_request:
  workflow_dispatch:

jobs:
  prepare-build:
    runs-on: ubuntu-22.04
    outputs:
      firmwares: ${{ steps.get-firmwares.outputs.directories }}
    steps:
      - uses: actions/checkout@v3
      - name: Build firmware list from directories in ./firmware
        id: get-firmwares
        run: python3 ci/dir_to_json.py ./firmware >> $GITHUB_OUTPUT
      - name: Get and cache apt dependencies
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: gcc-aarch64-linux-gnu
          version: 1.0

  build-module:
    runs-on: ubuntu-22.04
    needs: prepare-build
    strategy:
      matrix:
        firmware: ${{ fromJSON(needs.prepare-build.outputs.firmwares) }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Extract kernel download URL
        id: get-kernel-url
        run: |
          KERNEL_URL="$(cat firmware/${{ matrix.firmware }}/kernel-url.txt | tr -d '\n')"
          echo "kernel-url=${KERNEL_URL}" >> $GITHUB_OUTPUT
          echo "kernel-url-b64=$(echo ${KERNEL_URL} | base64 -w0)" >> $GITHUB_OUTPUT
      - name: Restore kernel archive from cache
        id: cache-kernel-archive
        uses: actions/cache@v3
        with:
          path: ./linux-udr.tar.gz
          key: ${{ steps.get-kernel-url.outputs.kernel-url-b64 }}
      - name: Download kernel archive if required
        if: steps.cache-kernel-archive.outputs.cache-hit != 'true'
        run: |
          curl -Lo ./linux-udr.tar.gz "${{ steps.get-kernel-url.outputs.kernel-url }}"
      - name: Ensure kernel SHA matches
        run: sha256sum -c firmware/${{ matrix.firmware }}/linux-udr.tar.gz.sum
      - name: Extract Kernel
        run: |
          mkdir linux-source
          tar -xf ./linux-udr.tar.gz --strip-components=1 -C linux-source
      - name: Copy kernel config file into kernel directory
        run: cp firmware/${{ matrix.firmware }}/kernel-config linux-source/.config
      - name: Update git tag placeholder in any patches
        run: |
          REF_STRING="$(git describe --tags)"
          sed -i "s@%%GIT_REF%%@${REF_STRING}@" firmware/${{ matrix.firmware }}/patches/*.patch
      - name: Apply firmware-specific patches
        run: find firmware/${{ matrix.firmware }}/patches -type f -name '*.patch' -print0 | sort -z | xargs -t -0 -n 1 patch -p0 -i
      - name: Restore cached apt depentencies
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: gcc-aarch64-linux-gnu
          version: 1.0
      - name: Prepare for building
        run: |
          cd linux-source
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- olddefconfig prepare
      - name: Build the module
        run: |
          cd linux-source
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- drivers/net/macvlan.ko
      - name: Add the module to the artifact directory
        run: |
          mkdir modules
          cp linux-source/drivers/net/macvlan.ko modules/${{matrix.firmware}}-macvlan.ko
      - name: Store the artifact
        uses: actions/upload-artifact@v3
        with:
          name: modules
          path: modules

  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-22.04
    needs:
      - build-module
      - prepare-build

    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: modules
          path: modules
      - name: Generate release text files
        run: |
          python ci/build_release_text_files.py "${{  github.ref_name }}" '${{ needs.prepare-build.outputs.firmwares }}' ./modules
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          draft: "true"
          body_path: text_files_out/release_notes.md
          files: |
            text_files_out/checksums.txt
            text_files_out/setup_macvlan.sh
            modules/*
